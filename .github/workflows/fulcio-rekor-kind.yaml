name: Fulcio&Rekor E2E Tests

on:
  pull_request:
    branches: [ main ]

permissions: read-all

defaults:
  run:
    shell: bash
    working-directory: ./src/github.com/sigstore/scaffolding

concurrency:
  group: fulcio-rekor-kind-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  fulcio-rekor-ctlog-tests:
    name: e2e tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.22.x
        - v1.23.x
        - v1.24.x

        leg:
        - fulcio rekor ctlog e2e

        ctlog-in-secret:
        - "true"
        - "false"

        go-version:
        - 1.18

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w
      KO_DOCKER_REPO: registry.local:5000/knative
      KOCACHE: ~/ko
      COSIGN_EXPERIMENTAL: true

    steps:
    - uses: chainguard-dev/actions/setup-mirror@main
    # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds

    - name: Set up Go
      uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # v3.3.0
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true

    - name: Check out our repo
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
      with:
        path: ./src/github.com/sigstore/scaffolding

    - uses: actions/cache@v3
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ${{ env.KOCACHE }}
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - uses: imjasonh/setup-ko@78eea08f10db87a7a23a666a4a6fe2734f2eeb8d # v0.4
      with:
        version: tip

    - uses: sigstore/cosign-installer@b3413d484cc23cf8778c3d2aa361568d4eb54679 # v2

    - name: Setup Cluster
      uses: chainguard-dev/actions/setup-kind@7d1eb557f464d97e5fe5177807a9226141eb9308
      id: kind
      with:
        k8s-version: ${{ matrix.k8s-version }}
        registry-authority: registry.local:5000
        cluster-suffix: cluster.local

    - name: Setup Knative
      uses: chainguard-dev/actions/setup-knative@main
      with:
        version: "1.6.0"
        serving-features: >
          {
            "kubernetes.podspec-fieldref": "enabled"
          }

    - name: Create sample image
      run: |
        pushd $(mktemp -d)
        go mod init example.com/demo
        cat <<EOF > main.go
        package main
        import "fmt"
        func main() {
          fmt.Println("hello world")
        }
        EOF
        demoimage=`ko publish -B example.com/demo`
        echo "demoimage=$demoimage" >> $GITHUB_ENV
        echo Created image $demoimage
        popd

    # Configure the CTLog either to be stored in the secret or configmap.
    # We do this by screwing around with the existing config files for now
    # instead of creating a whole set of parallel files for these.
    - name: Configure CTLog config storage
      if: ${{ matrix.ctlog-in-secret == 'true' }}
      run: |
        echo "Fixing CTLog config to use secrets"
        # First patch in the flag that creates the ctlog config in the secret.
        cp config/ctlog/certs/300-createconfig.yaml ./300-createconfig.yaml
        # The sed works differently in mac and other places, so just shuffle
        # files around for now.
        sed 's@"--secret=ctlog-secret"@"--secret=ctlog-secret","--config-in-secret"@' config/ctlog/certs/300-createconfig.yaml > ./300-createconfig-new.yaml
        mv ./300-createconfig-new.yaml config/ctlog/certs/300-createconfig.yaml

        cat config/ctlog/certs/300-createconfig.yaml

        # Then patch in the ctlog to mount the secret instead of the configmap.
        cp config/ctlog/ctlog/300-ctlog.yaml ./300-ctlog.yaml
        # The sed works differently in mac and other places, so just shuffle
        # files around for now.
        sed 's@configMap:@secret:@' config/ctlog/ctlog/300-ctlog.yaml > ./300-ctlog-tmp.yaml

        sed 's@name: ctlog-config@secretName: ctlog-secret@' 300-ctlog-tmp.yaml > ./300-ctlog-new.yaml
        rm 300-ctlog-tmp.yaml
        mv ./300-ctlog-new.yaml config/ctlog/ctlog/300-ctlog.yaml

        cat config/ctlog/ctlog/300-ctlog.yaml

    - name: Install scaffolding
      run: |
        ./hack/setup-scaffolding.sh

    - name: Restore CTLog config storage
      if: ${{ matrix.ctlog-in-secret == 'true' }}
      run: |
        echo "Restore CTLog config to not use secrets"
        mv ./300-createconfig.yaml config/ctlog/certs/300-createconfig.yaml
        mv ./300-ctlog.yaml config/ctlog/ctlog/300-ctlog.yaml

    - name: Initialize cosign with our custom tuf root and make root copy
      run: |
        kubectl -n tuf-system get secrets tuf-root -ojsonpath='{.data.root}' | base64 -d > ./root.json
        TUF_MIRROR=$(kubectl -n tuf-system get ksvc tuf -ojsonpath='{.status.url}')
        echo "TUF_MIRROR=$TUF_MIRROR" >> $GITHUB_ENV
        # Then initialize cosign
        cosign initialize --mirror $TUF_MIRROR --root ./root.json
        # Make copy of the tuf root in the default namespace for tests
        kubectl -n tuf-system get secrets tuf-root -oyaml | sed 's/namespace: .*/namespace: default/' | kubectl create -f -

    - name: Run signing job in k8s using kubernetes tokens in the cluster
      run: |
        make ko-apply-sign-job
        kubectl wait --for=condition=Complete --timeout=90s job/sign-job

    - name: Verify the image with cosign using kubernetes tokens in the cluster
      run: |
        make ko-apply-verify-job
        kubectl wait --for=condition=Complete --timeout=180s job/verify-job

    - name: Install a Knative service for fetch tokens off the cluster
      run: |
        make ko-apply-gettoken
        sleep 2
        kubectl wait --for=condition=Ready --timeout=15s ksvc gettoken

    - name: Get the endpoints on the cluster
      run: |
        REKOR_URL=$(kubectl -n rekor-system get ksvc rekor -ojsonpath='{.status.url}')
        echo "REKOR_URL=$REKOR_URL" >> $GITHUB_ENV

        FULCIO_URL=$(kubectl -n fulcio-system get ksvc fulcio -ojsonpath='{.status.url}')
        echo "FULCIO_URL=$FULCIO_URL" >> $GITHUB_ENV

        CTLOG_URL=$(kubectl -n ctlog-system get ksvc ctlog -ojsonpath='{.status.url}')
        echo "CTLOG_URL=$CTLOG_URL" >> $GITHUB_ENV

        ISSUER_URL=$(kubectl get ksvc gettoken -ojsonpath='{.status.url}')
        echo "ISSUER_URL=$ISSUER_URL" >> $GITHUB_ENV
        OIDC_TOKEN=`curl -s $ISSUER_URL`
        echo "OIDC_TOKEN=$OIDC_TOKEN" >> $GITHUB_ENV

    - name: Sign with cosign from the action using k8s token
      run: |
        cosign sign --rekor-url ${{ env.REKOR_URL }} --fulcio-url ${{ env.FULCIO_URL }} --force --allow-insecure-registry ${{ env.demoimage }} --identity-token ${{ env.OIDC_TOKEN }}

    - name: Verify with cosign from the action using k8s token
      run: |
        cosign verify --rekor-url ${{ env.REKOR_URL }} --allow-insecure-registry ${{ env.demoimage }}

    - name: Collect diagnostics
      if: ${{ failure() }}
      uses: chainguard-dev/actions/kind-diag@main
      with:
        artifact-name: logs.${{ matrix.k8s-version }}
