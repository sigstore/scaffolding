# Copyright 2022 The Sigstore Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Setup kind cluster, knative, and sigstore scaffolding'
description: 'Install kind, knative, and sigstore scaffolding then test'
branding:
  icon: box
  color: green
inputs:
  version:
    description: 'Version of scaffolding to install (v0.4.0, latest-release.)'
    required: true
    default: 'latest-release'
  sigstore-only:
    description: 'If set to "true" will not install kind cluster, only Sigstore'
    required: true
    default: 'false'
  working-directory:
    description: 'Where to copy the files to, default "."'
    required: true
    default: "."
  knative-version:
    description: 'Version of Knative to install (1.1.0, 1.1.1, etc.)'
    required: true
    default: '1.6.0'
  registry-name:
    description: 'Name of the registry to install (registry.local)'
    required: true
    default: 'registry.local'
  registry-port:
    description: 'Port to run registry on, default 5000'
    required: true
    default: '5000'
  cluster-suffix:
    description: 'Cluster suffix to use. Handy for testing hardcoded assumptions. Default: cluster.local'
    required: true
    default: 'cluster.local'
  k8s-version:
    description: 'kubernetes version to install (v1.23.x, v1.24.x, v1.25.x, v1.26.x, v1.27.x, v1.28.x), default: v1.24.x'
    required: true
    default: 'v1.24.x'
runs:
  using: "composite"
  steps:
  - shell: bash
    run: |
      set -ex

      # Determine which version to install
      # - if version is "latest-release", look up latest release.
      # - otherwise, install the specified version.
      case ${{ inputs.version }} in
      latest-release)
        tag=$(curl -s -u "username:${{ github.token }}" https://api.github.com/repos/sigstore/scaffolding/releases/latest | jq -r '.tag_name')
        ;;
      *)
        tag="${{ inputs.version }}"
      esac

      # At release v0.5.0 we added support for TSA. Check if we're running
      # greater than v0.5.0 and install it.
      # the install process, so check to see if we are running >=5
      MINOR=$(echo $tag | cut -d '.' -f 2)
      INSTALL_TSA="false"
      if [ ${MINOR} -ge 5 ]; then
        INSTALL_TSA="true"
      fi
      # Anything older than 0.4.0 is not supported.
      if [ ${MINOR} -lt 4 ]; then
        echo Unsupported version, only support versions >= 0.4.0
        exit 1
      fi

      if [ ${{ inputs.sigstore-only }} == "false" ]; then
        # Configure DockerHub mirror
        tmp=$(mktemp)
        jq '."registry-mirrors" = ["https://mirror.gcr.io"]' /etc/docker/daemon.json > "$tmp"
        sudo mv "$tmp" /etc/docker/daemon.json
        sudo service docker restart

        echo "Installing kind and knative using release"
        curl -fLo ./setup-kind.sh https://github.com/sigstore/scaffolding/releases/download/${tag}/setup-kind.sh
        chmod u+x ./setup-kind.sh
        ./setup-kind.sh \
          --registry-url ${{ inputs.registry-name }}:${{ inputs.registry-port }} \
          --cluster-suffix ${{ inputs.cluster-suffix }} \
          --k8s-version ${{ inputs.k8s-version }} \
          --knative-version ${{ inputs.knative-version }}
      fi

      echo "Installing sigstore scaffolding @ ${tag}"
      curl -fLo /tmp/setup-scaffolding-from-release.sh https://github.com/sigstore/scaffolding/releases/download/${tag}/setup-scaffolding-from-release.sh
      # Temp hack to address issuer mismatch issue.
      # Can be removed with the next release, after v0.6.5
      sed -i "s@kubectl apply -f \"\${FULCIO}\"@curl -Ls \"\${FULCIO}\" | sed 's#\"IssuerURL\": \"https://kubernetes.default.svc\",#\"IssuerURL\": \"https://kubernetes.default.svc.cluster.local\",#' | kubectl apply -f -@" /tmp/setup-scaffolding-from-release.sh
      chmod u+x /tmp/setup-scaffolding-from-release.sh
      cat /tmp/setup-scaffolding-from-release.sh
      /tmp/setup-scaffolding-from-release.sh --release-version ${tag}
      TUF_MIRROR=$(kubectl -n tuf-system get ksvc tuf -ojsonpath='{.status.url}')
      echo "TUF_MIRROR=$TUF_MIRROR" >> $GITHUB_ENV
      # Grab the trusted root
      kubectl -n tuf-system get secrets tuf-root -ojsonpath='{.data.root}' | base64 -d > ${{ inputs.working-directory }}/root.json

      # Make copy of the tuf root in the default namespace for tests
      kubectl -n tuf-system get secrets tuf-root -oyaml | sed 's/namespace: .*/namespace: default/' | kubectl create -f -

      echo "Installing and running scaffolding tests to verify we are up and running"
      curl -fL https://github.com/sigstore/scaffolding/releases/download/${tag}/testrelease.yaml | kubectl create -f -

      kubectl wait --for=condition=Complete --timeout=180s job/sign-job
      kubectl wait --for=condition=Complete --timeout=180s job/verify-job

      REKOR_URL=$(kubectl -n rekor-system get ksvc rekor -ojsonpath='{.status.url}')
      FULCIO_URL=$(kubectl -n fulcio-system get ksvc fulcio -ojsonpath='{.status.url}')
      FULCIO_GRPC_URL=$(kubectl -n fulcio-system get ksvc fulcio-grpc -ojsonpath='{.status.url}')
      CTLOG_URL=$(kubectl -n ctlog-system get ksvc ctlog -ojsonpath='{.status.url}')
      ISSUER_URL=$(kubectl get ksvc gettoken -ojsonpath='{.status.url}')
      if [ $INSTALL_TSA == "true" ] ; then
        TSA_URL=$(kubectl -n tsa-system get ksvc tsa -ojsonpath='{.status.url}')
        echo "TSA_URL=$TSA_URL" >> $GITHUB_ENV
      fi

      # Grab an OIDC token too.
      OIDC_TOKEN=$(curl -s $ISSUER_URL)
      echo "OIDC_TOKEN=$OIDC_TOKEN" >> $GITHUB_ENV

      # And set the env variables for Github action visibility
      echo "REKOR_URL=$REKOR_URL" >> $GITHUB_ENV
      echo "FULCIO_URL=$FULCIO_URL" >> $GITHUB_ENV
      echo "FULCIO_GRPC_URL=$FULCIO_GRPC_URL" >> $GITHUB_ENV
      echo "CTLOG_URL=$CTLOG_URL" >> $GITHUB_ENV
      echo "ISSUER_URL=$ISSUER_URL" >> $GITHUB_ENV


