// Copyright 2022 The Sigstore Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"context"
	"flag"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/sigstore/scaffolding/pkg/certs"
	"github.com/sigstore/scaffolding/pkg/repo"
	"github.com/sigstore/scaffolding/pkg/secret"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"knative.dev/pkg/logging"
	"knative.dev/pkg/signals"
	"sigs.k8s.io/release-utils/version"
)

const (
	modeInit            = "init"
	modeInitAndServe    = "init-and-serve"
	modeServe           = "serve"
	modeInitNoOverwrite = "init-no-overwrite"
)

var (
	dir       = flag.String("file-dir", "/var/run/tuf-secrets", "Directory where all the files that need to be added to TUF root live. File names are used to as targets.")
	targetDir = flag.String("target-dir", "", "Directory where TUF repository should be created/served from. Defaults to temporary directory.")
	mode      = flag.String("mode", modeInitAndServe, "Run mode of the TUF server. One of: init, init-and-serve, serve, init-no-overwrite")
	// Name of the "secret" where we create two entries, one for:
	// root = Which holds 1.root.json
	// repository - Compressed repo, which has been tar/gzipped.
	secretName = flag.String("rootsecret", "tuf-root", "Name of the secret to create for the initial root file")
	// Name of the "secret" where we create one entry per key JSON definition as generated by TUF, e.g. "root.json", "timestamp.json", ...
	keysSecretName  = flag.String("keyssecret", "", "Name of the secret to create for generated keys (keys won't be stored unless this is provided)")
	noK8s           = flag.Bool("no-k8s", false, "Run in a non-k8s environment")
	metadataTargets = flag.Bool("metadata-targets", true, "Serve individual targets with custom Sigstore metadata. This will be deprecated and removed in the future.")
	trustedRoot     = flag.Bool("trusted-root", true, "Generate and serve trusted_root.json")
)

func getNamespaceAndClientset(noK8s bool) (string, *kubernetes.Clientset, error) {
	if noK8s {
		return "", nil, nil
	}

	ns := os.Getenv("NAMESPACE")
	if ns == "" {
		panic("env variable NAMESPACE must be set")
	}

	config, err := rest.InClusterConfig()
	if err != nil {
		return "", nil, fmt.Errorf("failed to get InClusterConfig: %w", err)
	}
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		return "", nil, fmt.Errorf("failed to get clientset: %w", err)
	}

	return ns, clientset, nil
}

func initTUFRepo(ctx context.Context, certsDir, targetDir, repoSecretName, keysSecretName string) error {
	versionInfo := version.GetVersionInfo()
	logging.FromContext(ctx).Infof("running create_repo Version: %s GitCommit: %s BuildDate: %s", versionInfo.GitVersion, versionInfo.GitCommit, versionInfo.BuildDate)

	ns, clientset, err := getNamespaceAndClientset(*noK8s)
	if err != nil {
		return fmt.Errorf("failed to get namespace and clientset: %w", err)
	}

	trimDir := strings.TrimSuffix(certsDir, "/")
	tufFiles, err := os.ReadDir(trimDir)
	if err != nil {
		return fmt.Errorf("failed to read dir %s: %w", trimDir, err)
	}
	files := map[string][]byte{}
	for _, file := range tufFiles {
		if !file.IsDir() {
			logging.FromContext(ctx).Infof("Got file %s", file.Name())
			// Kubernetes adds some extra files here that are prefixed with
			// .., for example '..data' so skip those.
			if strings.HasPrefix(file.Name(), "..") {
				logging.FromContext(ctx).Infof("Skipping .. file %s", file.Name())
				continue
			}
			fileName := fmt.Sprintf("%s/%s", trimDir, file.Name())
			fileBytes, err := os.ReadFile(fileName)
			if err != nil {
				return fmt.Errorf("failed to read file %s: %w", fileName, err)
			}
			// If it's a TSA file, we need to split it into multiple TUF
			// targets.
			if strings.Contains(file.Name(), "tsa") {
				logging.FromContext(ctx).Infof("Splitting TSA certchain into individual certs")

				certFiles, err := certs.SplitCertChain(fileBytes, "tsa")
				if err != nil {
					return fmt.Errorf("failed to parse %s: %w", fileName, err)
				}
				for k, v := range certFiles {
					logging.FromContext(ctx).Infof("Got tsa cert file %s", k)
					trimmedCert := strings.TrimSpace(string(v))
					files[k] = []byte(trimmedCert)
				}
			} else {
				files[file.Name()] = fileBytes
			}
		}
	}

	// Create a new TUF root with the listed artifacts.
	local, dir, err := repo.CreateRepoWithOptions(ctx, files, repo.CreateRepoOptions{AddMetadataTargets: *metadataTargets, AddTrustedRoot: *trustedRoot})
	if err != nil {
		return fmt.Errorf("failed to create repo: %w", err)
	}

	meta, err := local.GetMeta()
	if err != nil {
		return fmt.Errorf("getting meta: %w", err)
	}
	rootJSON, ok := meta["root.json"]
	if !ok {
		return fmt.Errorf("getting root: %w", err)
	}

	// Add the initial 1.root.json to secrets.
	data := make(map[string][]byte)
	data["root"] = rootJSON

	// Then compress the root directory and put it into a secret
	// Secrets have 1MiB and the repository as tested goes to about ~3k, so no
	// worries here.
	var compressed bytes.Buffer
	if err := repo.CompressFS(os.DirFS(dir), &compressed, map[string]bool{"keys": true, "staged": true}); err != nil {
		return fmt.Errorf("failed to compress the repo: %w", err)
	}
	data["repository"] = compressed.Bytes()

	if !*noK8s {
		nsSecret := clientset.CoreV1().Secrets(ns)
		if err := secret.ReconcileSecret(ctx, repoSecretName, ns, data, nsSecret); err != nil {
			return fmt.Errorf("failed to reconcile secret %s/%s: %w", ns, repoSecretName, err)
		}

		// If we should also store created keys in a secret, read all their files and save them in the secret
		if keysSecretName != "" {
			keyFiles, err := os.ReadDir(filepath.Join(dir, "keys"))
			if err != nil {
				return fmt.Errorf("failed to list keys directory %w", err)
			}
			dataKeys := map[string][]byte{}
			for _, keyFile := range keyFiles {
				if !strings.HasSuffix(keyFile.Name(), ".json") {
					continue
				}
				keyFilePath := filepath.Join(dir, "keys", keyFile.Name())
				content, err := os.ReadFile(keyFilePath)
				if err != nil {
					return fmt.Errorf("failed reading file %s: %w", keyFilePath, err)
				}
				dataKeys[keyFile.Name()] = content
			}
			if err := secret.ReconcileSecret(ctx, keysSecretName, ns, dataKeys, nsSecret); err != nil {
				return fmt.Errorf("failed to reconcile keys secret %s/%s: %w", ns, keysSecretName, err)
			}
		}
	}

	logging.FromContext(ctx).Infof("tuf repository was created in: %s, moving to %s", dir, targetDir)

	// Copy repository to the targetDir - until Go 1.23 which has os.CopyFS, we use
	// a quick hack where we uncompress the compressed repository to the targetDir
	return repo.Uncompress(bytes.NewReader(data["repository"]), targetDir)
}

func main() {
	flag.Parse()

	ctx := signals.NewContext()

	if *metadataTargets {
		logging.FromContext(ctx).Warnf("Serving individual TUF targets with custom Sigstore metadata will be deprecated and removed in the future.")
	}

	serve := false
	init := false
	overwrite := true

	switch *mode {
	case modeInit:
		init = true
	case modeInitAndServe:
		init = true
		serve = true
	case modeInitNoOverwrite:
		init = true
		overwrite = false
	case modeServe:
		if *targetDir == "" {
			logging.FromContext(ctx).Fatalf("'targetDir' must be specified to use the 'serve' mode")
		}
		serve = true
	default:
		logging.FromContext(ctx).Fatalf("unknown mode %s", *mode)
	}

	if *targetDir == "" {
		newTmpDir, err := os.MkdirTemp(os.TempDir(), "tuf-serve")
		if err != nil {
			logging.FromContext(ctx).Fatalf("failed creating temporary directory in %s: %v", os.TempDir(), err)
		}
		*targetDir = newTmpDir
	}

	if init {
		repoExists := false
		// See if the TUF repository already exists; right now we only see if root.json exists,
		// but this could certainly be made much more sophisticated
		if _, err := os.Stat(filepath.Join(*targetDir, "repository", "root.json")); err == nil {
			repoExists = true
		}

		if repoExists && !overwrite {
			logging.FromContext(ctx).Infof("TUF repository already exists, skipping initialization...")
		} else {
			err := initTUFRepo(ctx, *dir, *targetDir, *secretName, *keysSecretName)
			if err != nil {
				logging.FromContext(ctx).Fatalf("%v", err)
			}
			logging.FromContext(ctx).Infof("tuf repository was created in: %s", *targetDir)
		}
	}

	if serve {
		// Serve the TUF repository.
		serveDir := filepath.Join(*targetDir, "repository")
		logging.FromContext(ctx).Infof("serving tuf root at %s", serveDir)
		fs := http.FileServer(http.Dir(serveDir))
		http.Handle("/", fs)

		/* #nosec G114 */
		if err := http.ListenAndServe(":8080", nil); err != nil { //nolint: gosec
			panic(err)
		}
	}
}
